This is link of leetcode question
-> https://leetcode.com/problems/number-of-islands/


-> Given below is question

Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.


-> These are examples :
Example-1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example-2:

 Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

-> Before we go to the problem, let us understand what is a connected component. A connected component of an undirected graph is a subgraph in which every two vertices 
are connected to each other by a path(s), and which is connected to no other vertices outside the subgraph.

-> Approach 

A cell in 2D matrix can be connected to 8 neighbours. So, unlike standard DFS(), where we recursively call for
all adjacent vertices, here we can recursively call for 8 neighbours only. We keep track of the visited 1s so that
they are not visited again.
Now understand by an example:
                   {{1X, 1X, 0, 0, 0},
                   {0, 1X, 0, 0, 1Y},
                   {1X, 0, 0, 1Y, 1Y},
                   {0, 0, 0, 0, 0},
                   {1Z, 0, 1A, 0, 1B} }

                   Output : 5
here if we mark a group of pair as same alpahabet let us say X,Y,Z,A,B .
in first pair X 
in 2nd pair Y
now Z is alone so it is a group itself
and similary for A
similary for B
So output is 5.


// Java program to count islands 
import java.util.*; 
import java.lang.*; 
import java.io.*; 

class Islands { 
	// No of rows and columns 
  
	static final int ROW = 5, COL = 5; 

	// A function to check if a given cell (row, col) can 
	// be included in DFS 
  
	boolean isSafe(int M[][], int row, int col, 
				boolean visited[][]) 
	{ 
		// row number is in range, column number is in range 
		// and value is 1 and not yet visited 
    
		return (row >= 0) && (row < ROW) && (col >= 0) && (col < COL) && (M[row][col] == 1 && !visited[row][col]); 
	} 

	// A utility function to do DFS for a 2D boolean matrix. 
	// It only considers the 8 neighbors as adjacent vertices 
  
	void DFS(int M[][], int row, int col, boolean visited[][]) 
	{ 
		// These arrays are used to get row and column numbers 
		// of 8 neighbors of a given cell 
    
		int rowNbr[] = new int[] { -1, -1, -1, 0, 0, 1, 1, 1 }; 
		int colNbr[] = new int[] { -1, 0, 1, -1, 1, -1, 0, 1 }; 

		// Mark this cell as visited 
		visited[row][col] = true; 

		// Recur for all connected neighbours 
    
		for (int k = 0; k < 8; ++k) 
			if (isSafe(M, row + rowNbr[k], col + colNbr[k], visited)) 
				DFS(M, row + rowNbr[k], col + colNbr[k], visited); 
	} 

	// The main function that returns count of islands in a given 
	// boolean 2D matrix 
  
	int countIslands(int M[][]) 
	{ 
		// Make a bool array to mark visited cells. 
		// Initially all cells are unvisited 
    
		boolean visited[][] = new boolean[ROW][COL]; 

		// Initialize count as 0 and travese through the all cells 
		// of given matrix 
    
		int count = 0; 
		for (int i = 0; i < ROW; ++i) 
			for (int j = 0; j < COL; ++j) 
				if (M[i][j] == 1 && !visited[i][j]) 
        
        // If a cell with 
        
				{ 
           // value 1 is not 
					// visited yet, then new island found, Visit all 
					// cells in this island and increment island count 
          
					DFS(M, i, j, visited); 
					++count; 
				} 

		return count; 
	} 

	
	public static void main(String[] args) throws java.lang.Exception 
	{ 
		int M[][] = new int[][] { { 1, 1, 0, 0, 0 }, 
								{ 0, 1, 0, 0, 1 }, 
								{ 1, 0, 0, 1, 1 }, 
								{ 0, 0, 0, 0, 0 }, 
								{ 1, 0, 1, 0, 1 } }; 
		Islands I = new Islands(); 
		System.out.println("Number of islands is: " + I.countIslands(M)); 
	} 
} 

-> Time complexity:
    
    O(ROW x COL)

